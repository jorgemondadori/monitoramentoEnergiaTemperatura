
//inserir bibliotecas
#include <WiFi.h>
#include <PZEM004Tv30.h>
#include "max6675.h"
#include <PubSubClient.h>



const char* ssid     = "mondadori24";
const char* password = "menon0811";

const char* server = "192.168.0.104";

WiFiClient espClient;
PubSubClient client(espClient);
long lastMsg = 0;
char msg[50];
int value = 0;
String payload = "";

const int ledPin = 14;

int thermoDO = 4;
int thermoCS = 5;
int thermoCLK = 2;
float temperatura;

MAX6675 thermocouple(thermoCLK, thermoCS, thermoDO);

#if !defined(PZEM_RX_PIN) && !defined(PZEM_TX_PIN)
#define PZEM_RX_PIN 16
#define PZEM_TX_PIN 17
#endif

#if !defined(PZEM_SERIAL)
#define PZEM_SERIAL Serial2
#endif


#if defined(ESP32)
PZEM004Tv30 pzem(PZEM_SERIAL, PZEM_RX_PIN, PZEM_TX_PIN);
#elif defined(ESP8266)
//PZEM004Tv30 pzem(Serial1);
#else
PZEM004Tv30 pzem(PZEM_SERIAL);
#endif


void setup() {
    // Debugging Serial port
    Serial.begin(115200);

    // Uncomment in order to reset the internal energy counter
    pzem.resetEnergy();
    Serial.println("Starting connecting WiFi.");
    delay(10);
    WiFi.begin(ssid, password);
    while (WiFi.status() != WL_CONNECTED) {
     delay(500);
     Serial.print(".");
    }
     Serial.println("WiFi connected");
     Serial.println("IP address: ");
     Serial.println(WiFi.localIP());

     client.setServer(server, 1883);
  client.setCallback(callback);

  pinMode(ledPin, OUTPUT);
  
}


void callback(char* topic, byte* message, unsigned int length) {
 // Serial.print("Message arrived on topic: ");
 // Serial.print(topic);
 // Serial.print(". Message: ");
  String messageTemp;
  
  for (int i = 0; i < length; i++) {
 //   Serial.print((char)message[i]);
    messageTemp += (char)message[i];
  }
  //Serial.println();

  if (String(topic) == "esp32/output") {
   // Serial.print("Changing output to ");
    if(messageTemp == "on"){
   //   Serial.println("on");
      digitalWrite(ledPin, HIGH);
    }
    else if(messageTemp == "off"){
    //  Serial.println("off");
      digitalWrite(ledPin, LOW);
    }
  }
}



void reconnect() {

  while (!client.connected()) {
  //  Serial.print("Attempting MQTT connection...");
   
    if (client.connect("ESP8266Client")) {
  //    Serial.println("connected");
     
      client.subscribe("esp32/output");
    } else {
  //    Serial.print("failed, rc=");
   //   Serial.print(client.state());
  //    Serial.println(" try again in 5 seconds");
      
      delay(5000);
    }
  }
}


void loop() {

if (!client.connected()) {
    reconnect();
  }
  client.loop();


  
    // Print the custom address of the PZEM
    //Serial.print("Custom Address:");
    //Serial.println(pzem.readAddress(), HEX);

    // Read the data from the sensor
    float voltage = pzem.voltage();
    float current = pzem.current();
    float power = pzem.power();
    float energy = pzem.energy();
    float frequency = pzem.frequency();
    float pf = pzem.pf();
    temperatura = thermocouple.readCelsius();

    // Check if the data is valid
 /*   if(isnan(voltage)){
        Serial.println("Error reading voltage");
    } else if (isnan(current)) {
        Serial.println("Error reading current");
    } else if (isnan(power)) {
        Serial.println("Error reading power");
    } else if (isnan(energy)) {
        Serial.println("Error reading energy");
    } else if (isnan(frequency)) {
        Serial.println("Error reading frequency");
    } else if (isnan(pf)) {
        Serial.println("Error reading power factor");
    } else {

        // Print the values to the Serial console
        Serial.print("Voltage: ");      Serial.print(voltage);      Serial.println("V");
        Serial.print("Current: ");      Serial.print(current);      Serial.println("A");
        Serial.print("Power: ");        Serial.print(power);        Serial.println("W");
        Serial.print("Energy: ");       Serial.print(energy,3);     Serial.println("kWh");
        Serial.print("Frequency: ");    Serial.print(frequency, 1); Serial.println("Hz");
        Serial.print("PF: ");           Serial.println(pf);
        Serial.println(thermocouple.readCelsius());
        
    }
*/

    char tensaoString[10];
    dtostrf(voltage, 4, 2, tensaoString);
    char correnteString[10];
    dtostrf(current, 4, 2, correnteString);
    char potenciaString[10];
    dtostrf(power, 4, 2, potenciaString);
    char energiaString[10];
    dtostrf(energy, 4, 2, energiaString);
    char frequenciaString[10];
    dtostrf(frequency, 4, 2, frequenciaString);
    char fpString[10];
    dtostrf(pf, 4, 2, fpString);
    char temperaturaString[10];
    dtostrf(temperatura, 4, 2, temperaturaString);

    payload = "{\"Tensao\":" + String(tensaoString) + ",\"Corrente\":"  +String(correnteString)+",\"Potencia\":" +String(potenciaString)+",\"Energia\":" +String(energiaString)+",\"Frequencia\":" +String(frequenciaString)+",\"Fator de Potencia\":" +String(fpString)+",\"Temperatura\":" + String(temperaturaString)+ "}";                                

    client.publish("esp32/powermeter", payload.c_str());

    //Serial.println();
    delay(250);
}
